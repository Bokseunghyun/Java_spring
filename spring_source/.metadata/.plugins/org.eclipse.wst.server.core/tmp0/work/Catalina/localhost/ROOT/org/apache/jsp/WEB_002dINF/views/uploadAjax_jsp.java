/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.22
 * Generated at: 2019-10-10 02:40:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class uploadAjax_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/resources/css/mycss.css\"/>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class=\"uploadDiv\">\r\n");
      out.write("\t\t<input type=\"file\" name=\"uploadFile\" id=\"\" multiple=\"multiple\"/>\t\t\r\n");
      out.write("\t\t<button id=\"uploadBtn\">Submit</button>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"uploadResult\">\r\n");
      out.write("\t\t<ul></ul>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"bigPictureWrapper\">\r\n");
      out.write("\t\t<div class=\"bigPicture\">\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\t$(function(){\r\n");
      out.write("\t\t$(\"#uploadBtn\").click(function(){\r\n");
      out.write("\t\t\tconsole.log(\"ajax 파일 업로드 호출\");\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//multipart/form-data 를 ajax 로 쉽게 처리할 수 있는 기능 사용\r\n");
      out.write("\t\t\tvar formData=new FormData();\r\n");
      out.write("\t\t\t//첨부 파일 목록 배열로 받기\r\n");
      out.write("\t\t\tvar inputFile=$(\"input[name='uploadFile']\");\r\n");
      out.write("\t\t\tvar files=inputFile[0].files;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tfor(var i=0;i<files.length;i++){\r\n");
      out.write("\t\t\t\tif(!checkExtension(files[i].name, files[i].size)){\r\n");
      out.write("\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tformData.append(\"uploadFile\", files[i]);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\turl : 'uploadAjax',\r\n");
      out.write("\t\t\t\ttype : 'post',\r\n");
      out.write("\t\t\t\tprocessData : false, //데이터를 서버로 전송할 때 query string 형태로 보내지 않음\r\n");
      out.write("\t\t\t\tcontentType : false, // application/~~~  이기 때문에 false로 지정해서 원하는 형태를 보냄\r\n");
      out.write("\t\t\t\tdata : formData,\r\n");
      out.write("\t\t\t\tdataType : 'json',  //서버에서 보내주는 값\r\n");
      out.write("\t\t\t\tsuccess:function(result){\r\n");
      out.write("\t\t\t\t\tconsole.log(result);\r\n");
      out.write("\t\t\t\t\tshowUploadedFile(result);\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\terror:function(request,status,error){\r\n");
      out.write("\t\t\t\t\tconsole.log(status);\r\n");
      out.write("\t\t\t\t}\t\t\t\t\r\n");
      out.write("\t\t\t})//ajax 종료\r\n");
      out.write("\t\t})//uploadBtn 종료\r\n");
      out.write("\t\r\n");
      out.write("\t\t//첨부파일 목록 보여주기\r\n");
      out.write("\t\tfunction showUploadedFile(uploadResultArr){\r\n");
      out.write("\t\t\tvar str =\"\";\r\n");
      out.write("\t\t\tvar uploadResult=$(\".uploadResult ul\");\r\n");
      out.write("\t\t\t$(uploadResultArr).each(function(i,obj){\r\n");
      out.write("\t\t\t\tif(!obj.image){ //이미지 파일 아닌 경우\r\n");
      out.write("\t\t\t\t\tvar fileCallPath=encodeURIComponent(obj.uploadPath+\"/\"+obj.uuid+\"_\"+obj.fileName);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\tstr+=\"<li>\";\r\n");
      out.write("\t\t\t\tstr+=\"<a href='/download?fileName=\"+fileCallPath+\"'>\";\r\n");
      out.write("\t\t\t\tstr+=\"<img src='/resources/img/attach.png'>\";\r\n");
      out.write("\t\t\t\tstr+=obj.fileName+\"</a>\";\r\n");
      out.write("\t\t\t\tstr+=\"<span data-file='\"+fileCallPath+\"' data-type='file'> x </span>\";\r\n");
      out.write("\t\t\t\tstr+=\"</li>\";\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t}else{ //이미지 파일인 경우\r\n");
      out.write("\t\t\t\t\tvar fileCallPath=encodeURIComponent(obj.uploadPath+\"/s_\"+obj.uuid+\"_\"+obj.fileName);\r\n");
      out.write("\t\t\t\t\tvar oriPath=obj.uploadPath+\"/\"+obj.uuid+\"_\"+obj.fileNale;\r\n");
      out.write("\t\t\t\t\tpriPath=oriPath.replace(new RegExp(/\\\\/g),\"/\");\t\r\n");
      out.write("\t\t\t\t\tstr+=\"<li>\";\t\r\n");
      out.write("\t\t\t\t\tstr+=\"<a href=\\\"javascript:showImage(\\'\"+oriPath+\"\\')\\\">\";\r\n");
      out.write("\t\t\t\t\tstr+=\"<img src='/display?fileName=\"+fileCallPath+\"'>\";\r\n");
      out.write("\t\t\t\t\tstr+=obj.fileName+\"</a>\";\r\n");
      out.write("\t\t\t\t\tstr+=\"<span data-file='\"+fileCallPath+\"' data-type='image'> x </span>\";\r\n");
      out.write("\t\t\t\t\tstr+=\"</li>\";\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\tuploadResult.append(str);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//x를 누르면 삭제하기\r\n");
      out.write("\t\t$(\".uploadResult\").on(\"click\",\"span\",function(){\r\n");
      out.write("\t\t\tvar targetFile=$(this).data(\"file\");\r\n");
      out.write("\t\t\tvar type=$(this).data(\"type\");\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar targetLi=$(this).closest(\"li\");\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\turl:'deleteFile',\r\n");
      out.write("\t\t\t\tdataType:'text',\r\n");
      out.write("\t\t\t\tdata:{\r\n");
      out.write("\t\t\t\t\tfileName:targetFile,\r\n");
      out.write("\t\t\t\t\ttype:type\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tsuccess:function(result){\r\n");
      out.write("\t\t\t\t\tconsole.log(result);\r\n");
      out.write("\t\t\t\t\ttargetLi.remove();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//원본 이미지 클릭하면 닫기\r\n");
      out.write("\t\t$(\".bigPictureWrapper\").on(\"click\",function(){\r\n");
      out.write("\t\t\t$(\".bigPicture\").animate({width:'0%',height:'0%'},1000);\r\n");
      out.write("\t\t\tsetTimeout(function(){\r\n");
      out.write("\t\t\t\t$(\".bigPictureWrapper\").hide();\r\n");
      out.write("\t\t\t},1000);\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction checkExtension(fileName,fileSize){\r\n");
      out.write("\t\t\tvar regex= new RegExp(\"(.*?)\\.(exe|sh|zip|alz)$\");\r\n");
      out.write("\t\t\tvar maxSize=2485760;\r\n");
      out.write("\t\t\tif(fileSize>maxSize){\r\n");
      out.write("\t\t\t\talert(\"파일 사이즈 초과\");\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif(regex.test(fileName)){\r\n");
      out.write("\t\t\t\talert(\"해당 종류의 파일은 업로드 할 수 없습니다.\");\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t})\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\t//썸네일 클릭시 원본 이미지 보여주기\r\n");
      out.write("\tfunction showImage(fileCallPath) {\r\n");
      out.write("\t\t$(\".bigPictureWrapper\").css(\"display\", \"flex\").show();\r\n");
      out.write("\r\n");
      out.write("\t\t$(\".bigPicture\").html(\r\n");
      out.write("\t\t\t\t\"<img src='/display?fileName=\"+fileCallPath+\"'>\").animate({\r\n");
      out.write("\t\t\twidth : '100%',\r\n");
      out.write("\t\t\theight : '100%'\r\n");
      out.write("\t\t}, 1000);\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
